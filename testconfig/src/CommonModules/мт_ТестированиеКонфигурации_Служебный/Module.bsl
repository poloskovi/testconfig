
#Область ПроверкаОбъектовМетаданных

Функция ПрефиксОбъектовНеНаПоддержке() Экспорт
	возврат мт_ТестированиеКонфигурации_Настройки.ПрефиксОбъектовНеНаПоддержке();
КонецФункции

Процедура ПроверитьНаличиеДвижений(МетаданныеДокумента, ТребуемыеДвижения, Отказ, ПроверенныеДвижения) Экспорт
	
	мСтрокиОшибок = Новый Массив;
	мСтрокиОшибок.Добавить("В документе "+МетаданныеДокумента.Имя + " не указаны движения по регистрам:");
	
	Для Каждого МетаданныеРегистра Из ТребуемыеДвижения Цикл
		
		Если НЕ МетаданныеДокумента.Движения.Содержит(МетаданныеРегистра) Тогда
			мСтрокиОшибок.Добавить(МетаданныеРегистра.ПолноеИмя());
		КонецЕсли;
		
	КонецЦикла;
		
	Если мСтрокиОшибок.Количество()>1 Тогда
		СообщитьОбОшибке(мСтрокиОшибок, Отказ);
	КонецЕсли;
	
	ПроверенныеДвижения.Вставить(МетаданныеДокумента, ТребуемыеДвижения);
	
КонецПроцедуры

Процедура ПроверитьВхождениеТипов_в_ТипМетаданного(ОбъектМетаданных, ТребуемыеТипы, Отказ, ПроверенныеТипы) Экспорт
	
	ЗаголовокСообщенияОбОшибке = "В типах объекта "+ОбъектМетаданных.ПолноеИмя() + " не указан тип:";
	
	мСтрокиОшибок = Новый Массив;
	мСтрокиОшибок.Добавить(ЗаголовокСообщенияОбОшибке);
	
	Для Каждого Тип Из ТребуемыеТипы Цикл
		
		Если НЕ ОбъектМетаданных.Тип.СодержитТип(Тип) Тогда
			мСтрокиОшибок.Добавить(Строка(Тип));
		КонецЕсли;
		
	КонецЦикла;
		
	Если мСтрокиОшибок.Количество()>1 Тогда
		СообщитьОбОшибке(мСтрокиОшибок, Отказ);
	КонецЕсли;
	
	ПроверенныеТипы.Вставить(ОбъектМетаданных, Новый ОписаниеТипов(ТребуемыеТипы));
	
КонецПроцедуры

Процедура ПроверитьВхождениеТипов_в_ТипПараметраКоманды(ОбъектМетаданных, ТребуемыеТипы, Отказ, ПроверенныеТипы) Экспорт
	
	ЗаголовокСообщенияОбОшибке = "В типах объекта "+ОбъектМетаданных.ПолноеИмя() + " не указан тип:";
	
	мСтрокиОшибок = Новый Массив;
	мСтрокиОшибок.Добавить(ЗаголовокСообщенияОбОшибке);
	
	Для Каждого Тип Из ТребуемыеТипы Цикл
		
		Если НЕ ОбъектМетаданных.ТипПараметраКоманды.СодержитТип(Тип) Тогда
			мСтрокиОшибок.Добавить(Строка(Тип));
		КонецЕсли;
		
	КонецЦикла;
		
	Если мСтрокиОшибок.Количество()>1 Тогда
		СообщитьОбОшибке(мСтрокиОшибок, Отказ);
	КонецЕсли;
	
	ПроверенныеТипы.Вставить(ОбъектМетаданных, Новый ОписаниеТипов(ТребуемыеТипы));
	
КонецПроцедуры

Процедура ПроверитьВхождениеВСостав(ОбъектМетаданных, ТребуемыйСостав, Отказ, ПроверенныйСостав) Экспорт
	
	ЗаголовокСообщенияОбОшибке = "В составе критерия отбора " + ОбъектМетаданных.ПолноеИмя() + " не указаны:";
	ПроверитьНаличиеМетаданныхВКоллекции(ОбъектМетаданных.Состав, ТребуемыйСостав, Отказ, ЗаголовокСообщенияОбОшибке);
	
	ПроверенныйСостав.Вставить(ОбъектМетаданных, ТребуемыйСостав);
	
КонецПроцедуры

Процедура ПроверитьВхождение_в_ВводНаОсновании(ОбъектМетаданных, ТребуемыеЭлементы, Отказ, ПроверенныйВводНаОсновании) Экспорт
	
	ЗаголовокСообщенияОбОшибке = "В перечне ""вводится на основании"" " + ОбъектМетаданных.ПолноеИмя() + " не указаны:";
	ПроверитьНаличиеМетаданныхВКоллекции(ОбъектМетаданных.ВводитсяНаОсновании, ТребуемыеЭлементы, Отказ, ЗаголовокСообщенияОбОшибке);
	
	ПроверенныйВводНаОсновании.Вставить(ОбъектМетаданных, ТребуемыеЭлементы);
	
КонецПроцедуры

Процедура ПроверитьНаличиеМетаданныхВКоллекции(КоллекцияОбъектовМетаданных, ТребуемыеЭлементы, Отказ, ЗаголовокСообщенияОбОшибке) Экспорт
	
	мСтрокиОшибок = Новый Массив;
	мСтрокиОшибок.Добавить(ЗаголовокСообщенияОбОшибке);
	
	Для Каждого ОбъектМетаданных Из ТребуемыеЭлементы Цикл
		
		Если НЕ КоллекцияОбъектовМетаданных.Содержит(ОбъектМетаданных) Тогда
			мСтрокиОшибок.Добавить(ОбъектМетаданных.ПолноеИмя());
		КонецЕсли;
		
	КонецЦикла;
		
	Если мСтрокиОшибок.Количество()>1 Тогда
		СообщитьОбОшибке(мСтрокиОшибок, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьНепроверенныеДвиженияПоДокументам(ПроверенныеДвижения, Отказ) Экспорт
	
	мСтрокиОшибок = Новый Массив;
	мСтрокиОшибок.Добавить("Не выполняется проверка движений по регистрам:");
	
	РегистрыНеНаПоддержке = Новый Массив;
	
	Для Каждого ОбъектМетаданных Из Метаданные.РегистрыНакопления Цикл
		Если Не ОбъектНаПоддержке(ОбъектМетаданных) Тогда
			РегистрыНеНаПоддержке.Добавить(ОбъектМетаданных);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из Метаданные.РегистрыСведений Цикл
		Если Не ОбъектНаПоддержке(ОбъектМетаданных) Тогда
			РегистрыНеНаПоддержке.Добавить(ОбъектМетаданных);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл
		
		Если ОбъектНаПоддержке(МетаданныеДокумента) Тогда
			
			Для Каждого МетаданныеРегистра Из РегистрыНеНаПоддержке Цикл
				
				Если МетаданныеДокумента.Движения.Содержит(МетаданныеРегистра)
					И Не ЕстьВПроверенныхДвижениях(ПроверенныеДвижения, МетаданныеДокумента, МетаданныеРегистра) Тогда
					мСтрокиОшибок.Добавить(СтрШаблон("%1 %2", МетаданныеДокумента.Имя, МетаданныеРегистра.ПолноеИмя()))
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если мСтрокиОшибок.Количество()>1 Тогда
		СообщитьОбОшибке(мСтрокиОшибок, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьОНепроверенныхТипах(ПроверенныеТипы, Отказ, ГруппаОбъектовМетаданных, ЗаголовокСообщенияОбОшибке) Экспорт
	
	НепроверенныеТипы = НепроверенныеТипы(ГруппаОбъектовМетаданных, ПроверенныеТипы);
	
	Если НепроверенныеТипы.Количество() > 0 Тогда
	
		мСтрокиОшибок = Новый Массив;
		мСтрокиОшибок.Добавить(ЗаголовокСообщенияОбОшибке);
	
		Для Каждого КлючИЗначение Из НепроверенныеТипы Цикл
			ОбъектаМетаданных = КлючИЗначение.Ключ;
			мНепроверенныеТипы = КлючИЗначение.Значение;
			Для Каждого НепроверенныйТип Из мНепроверенныеТипы Цикл
				мСтрокиОшибок.Добавить(СтрШаблон("%1 %2", ОбъектаМетаданных.Имя, Строка(НепроверенныйТип)))
			КонецЦикла;
		КонецЦикла;
		
		СообщитьОбОшибке(мСтрокиОшибок, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция НепроверенныеТипы(ГруппаОбъектовМетаданных, ПроверенныеТипы = Неопределено)
	
	Результат = Новый Соответствие;
	
	ТипыОбъектовНеНаПоддержке = Новый Массив;
	
	Для Каждого ОбъектМетаданных Из Метаданные.Справочники Цикл
		Если Не ОбъектНаПоддержке(ОбъектМетаданных) Тогда
			ТипыОбъектовНеНаПоддержке.Добавить(Тип("СправочникСсылка."+ОбъектМетаданных.Имя));
			ТипыОбъектовНеНаПоддержке.Добавить(Тип("СправочникОбъект."+ОбъектМетаданных.Имя));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из Метаданные.Документы Цикл
		Если Не ОбъектНаПоддержке(ОбъектМетаданных) Тогда
			ТипыОбъектовНеНаПоддержке.Добавить(Тип("ДокументСсылка."+ОбъектМетаданных.Имя));
			ТипыОбъектовНеНаПоддержке.Добавить(Тип("ДокументОбъект."+ОбъектМетаданных.Имя));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из ГруппаОбъектовМетаданных Цикл
		
		Если ОбъектНаПоддержке(ОбъектМетаданных) Тогда
			
			мНепроверенныеТипы = Новый Массив;
			
			Для Каждого Тип Из ТипыОбъектовНеНаПоддержке Цикл
				
				Если ОбъектМетаданных.Тип.СодержитТип(Тип)
					И Не ЕстьВПроверенныхТипах(ПроверенныеТипы, ОбъектМетаданных, Тип) Тогда
					
					мНепроверенныеТипы.Добавить(Тип);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если мНепроверенныеТипы.Количество() > 0 Тогда
				Результат.Вставить(ОбъектМетаданных, мНепроверенныеТипы);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура СообщитьОНепроверенномСоставе(ПроверенныйСостав, Отказ, ГруппаОбъектовМетаданных, ЗаголовокСообщенияОбОшибке) Экспорт
	
	НепроверенныйСостав = НепроверенныйСостав(ГруппаОбъектовМетаданных, ПроверенныйСостав);
	
	Если НепроверенныйСостав.Количество() > 0 Тогда
	
		мСтрокиОшибок = Новый Массив;
		мСтрокиОшибок.Добавить(ЗаголовокСообщенияОбОшибке);
	
		Для Каждого КлючИЗначение Из НепроверенныйСостав Цикл
			ОбъектМетаданных = КлючИЗначение.Ключ;
			мНепроверенныйСостав = КлючИЗначение.Значение;
			Для Каждого МетаданныеЭлемента Из мНепроверенныйСостав Цикл
				мСтрокиОшибок.Добавить(СтрШаблон("%1 %2", ОбъектМетаданных.Имя, МетаданныеЭлемента.ПолноеИмя()))
			КонецЦикла;
		КонецЦикла;
	
		СообщитьОбОшибке(мСтрокиОшибок, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция НепроверенныйСостав(ГруппаОбъектовМетаданных, ПроверенныйСостав = Неопределено)
	
	Результат = Новый Соответствие;
	
	Для Каждого ОбъектМетаданных Из ГруппаОбъектовМетаданных Цикл
		
		Если ОбъектНаПоддержке(ОбъектМетаданных) Тогда
			
			мНепроверенныйСостав = Новый Массив;
			
			Для Каждого МетаданныеЭлемента Из ОбъектМетаданных.Состав Цикл
				
				Если Не ОбъектНаПоддержке_ВключаяВложенные(МетаданныеЭлемента)
					И Не ЕстьВПроверенном(ПроверенныйСостав, ОбъектМетаданных, МетаданныеЭлемента) Тогда
					
					мНепроверенныйСостав.Добавить(МетаданныеЭлемента);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если мНепроверенныйСостав.Количество() > 0 Тогда
				Результат.Вставить(ОбъектМетаданных, мНепроверенныйСостав);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьНепроверенныйВводНаОсновании(ПроверенныйВводНаОсновании, Отказ, ГруппаОбъектовМетаданных, ЗаголовокСообщенияОбОшибке) Экспорт
	
	мСтрокиОшибок = Новый Массив;
	мСтрокиОшибок.Добавить(ЗаголовокСообщенияОбОшибке);
	
	Для Каждого ОбъектМетаданных Из ГруппаОбъектовМетаданных Цикл
		
		Если ОбъектНаПоддержке(ОбъектМетаданных) Тогда
			
			Для Каждого МетаданныеЭлемента Из ОбъектМетаданных.ВводитсяНаОсновании Цикл
				
				Если Не ОбъектНаПоддержке_ВключаяВложенные(МетаданныеЭлемента)
					И Не ЕстьВПроверенном(ПроверенныйВводНаОсновании, ОбъектМетаданных, МетаданныеЭлемента) Тогда
					мСтрокиОшибок.Добавить(СтрШаблон("%1 %2", ОбъектМетаданных.Имя, МетаданныеЭлемента.ПолноеИмя()))
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если мСтрокиОшибок.Количество()>1 Тогда
		СообщитьОбОшибке(мСтрокиОшибок, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьВПроверенныхДвижениях(ПроверенныеДвижения, МетаданныеДокумента, МетаданныеРегистра) Экспорт
	
	ПроверенныеДвиженияПоДокументу = ПроверенныеДвижения[МетаданныеДокумента];
	Если ПроверенныеДвиженияПоДокументу = Неопределено Тогда
		возврат Ложь;
	КонецЕсли;
	
	возврат ПроверенныеДвиженияПоДокументу.Найти(МетаданныеРегистра)<>Неопределено;
	
КонецФункции

Функция ЕстьВПроверенныхТипах(ПроверенныеТипы, ОбъектМетаданных, Тип) Экспорт
	
	Если ПроверенныеТипы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОписаниеТипов = ПроверенныеТипы[ОбъектМетаданных];
	Если ОписаниеТипов = Неопределено Тогда
		возврат Ложь;
	КонецЕсли;
	
	возврат ОписаниеТипов.СодержитТип(Тип);
	
КонецФункции

Функция ЕстьВПроверенном(Проверенные, ОбъектМетаданных, МетаданныеЭлемента)
	
	Если Проверенные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПроверенныеОбъекта = Проверенные[ОбъектМетаданных];
	Если ПроверенныеОбъекта = Неопределено Тогда
		возврат Ложь;
	КонецЕсли;
	
	возврат ПроверенныеОбъекта.Найти(МетаданныеЭлемента)<>Неопределено;
	
КонецФункции

Процедура СообщитьОбОшибке(мСтрокиОшибок, Отказ) Экспорт
	
	Отказ = Истина;
	ТекстСообщенияОбОшибке = СтрСоединить(мСтрокиОшибок, Символы.ПС + Символы.ВК);
	ЗаписьЖурналаРегистрации("Проверка конфигурации Меттойл", УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщенияОбОшибке);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
		
КонецПроцедуры

Функция ОбъектНаПоддержке(ОбъектМетаданных, ПроверкаСоставного=Ложь) Экспорт
	
	//Невозможно определить программно, находится объект на поддержке или нет (8.3.17) 
	//Поэтому определяем по префиксу имени
	
	ПрефиксОбъектовНеНаПоддержке = ПрефиксОбъектовНеНаПоддержке();
	
	//ищем в начале
	ЭтоДобавленныйОбъект = СтрНачинаетсяС(ОбъектМетаданных.Имя, ПрефиксОбъектовНеНаПоддержке);
	
	Если Не ЭтоДобавленныйОбъект 
		И ПроверкаСоставного Тогда
		//ищем в середине, определяет объекты типа Метаданные.Документы.ЭтапПроизводства2_2.ТабличныеЧасти.мт_Сборки.Реквизиты.ДокументСборки
		ПодстрокаПоиска = "."+ПрефиксОбъектовНеНаПоддержке;
		ЭтоДобавленныйОбъект = СтрНайти(ОбъектМетаданных.ПолноеИмя(), ПодстрокаПоиска)<>0;
	КонецЕсли;
	
	Возврат Не ЭтоДобавленныйОбъект;
	
КонецФункции

Функция ОбъектНаПоддержке_ВключаяВложенные(ОбъектМетаданных) Экспорт
	
	возврат ОбъектНаПоддержке(ОбъектМетаданных, Истина);
	
КонецФункции

#КонецОбласти

#Область АвтоматическаяГенерацияТекстовМодуля_ТестированиеКонфигурации_Сервер

Функция СгенерироватьТекстОбласти_ПроверкаДвижений() Экспорт
	
	РегистрыНеНаПоддержке = Новый Массив;
	
	Для Каждого ОбъектМетаданных Из Метаданные.РегистрыНакопления Цикл
		Если Не ОбъектНаПоддержке(ОбъектМетаданных) Тогда
			РегистрыНеНаПоддержке.Добавить(ОбъектМетаданных);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из Метаданные.РегистрыСведений Цикл
		Если Не ОбъектНаПоддержке(ОбъектМетаданных) Тогда
			РегистрыНеНаПоддержке.Добавить(ОбъектМетаданных);
		КонецЕсли;
	КонецЦикла;
	
	ДокументыКПроверке = Новый Структура;
	
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл
		
		Если ОбъектНаПоддержке(МетаданныеДокумента) Тогда
			
			мРегистрыКПроверке = Новый Массив;
		
			Для Каждого МетаданныеРегистра Из РегистрыНеНаПоддержке Цикл
				
				Если МетаданныеДокумента.Движения.Содержит(МетаданныеРегистра) Тогда
					Если ЭтоРегистрНакопления(МетаданныеРегистра) Тогда
						мРегистрыКПроверке.Добавить("Метаданные.РегистрыНакопления."+МетаданныеРегистра.Имя);
					Иначе
						мРегистрыКПроверке.Добавить("Метаданные.РегистрыСведений."+МетаданныеРегистра.Имя);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Если мРегистрыКПроверке.Количество() > 0 Тогда
				ДокументыКПроверке.Вставить(МетаданныеДокумента.Имя, мРегистрыКПроверке);
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	мСтр = Новый Массив;
	
	мСтр.Добавить("#Область ПроверкаДвижений");
	мСтр.Добавить();
	
	мСтр.Добавить("Процедура ПроверитьДвижения(Отказ)");
	мСтр.Добавить(Символы.Таб);
	мСтр.Добавить(Символы.Таб + "ПроверенныеДвижения = Новый Соответствие;");
	мСтр.Добавить(Символы.Таб);
	
	Для Каждого ЭлементДокумент Из ДокументыКПроверке Цикл
		мСтр.Добавить(Символы.Таб + "ПроверитьДвижения_" + ЭлементДокумент.Ключ + "(Отказ, ПроверенныеДвижения);");
	КонецЦикла;
	
	мСтр.Добавить(Символы.Таб);
	мСтр.Добавить(Символы.Таб + "мт_ТестированиеКонфигурации_Служебный.ПолучитьНепроверенныеДвиженияПоДокументам(ПроверенныеДвижения, Отказ);");
	мСтр.Добавить(Символы.Таб);
	мСтр.Добавить("КонецПроцедуры");
	мСтр.Добавить();
	
	Для Каждого ЭлементДокумент Из ДокументыКПроверке Цикл
		мСтр.Добавить("Процедура ПроверитьДвижения_" + ЭлементДокумент.Ключ + "(Отказ, ПроверенныеДвижения)");
		мСтр.Добавить(Символы.Таб);
		мСтр.Добавить(Символы.Таб + "МетаданныеДокумента = Метаданные.Документы." + ЭлементДокумент.Ключ + ";");
		мСтр.Добавить(Символы.Таб);
		мСтр.Добавить(Символы.Таб + "ТребуемыеДвижения = Новый Массив;");
		Для Каждого ЭлементРегистр Из ЭлементДокумент.Значение Цикл
			мСтр.Добавить(Символы.Таб + "ТребуемыеДвижения.Добавить(" + ЭлементРегистр + ");");
		КонецЦикла;
		мСтр.Добавить(Символы.Таб);
		мСтр.Добавить(Символы.Таб + "мт_ТестированиеКонфигурации_Служебный.ПроверитьНаличиеДвижений(МетаданныеДокумента, ТребуемыеДвижения, Отказ, ПроверенныеДвижения);");
		мСтр.Добавить(Символы.Таб);
		мСтр.Добавить("КонецПроцедуры");
		мСтр.Добавить();
	КонецЦикла;
	
	мСтр.Добавить("#КонецОбласти");
	мСтр.Добавить();
	
	ТекстОбласти = Новый ТекстовыйДокумент;
	Для Каждого Строчка Из мСтр Цикл
		ТекстОбласти.ДобавитьСтроку(Строчка);
	КонецЦикла;
	
	Возврат ТекстОбласти;
	
КонецФункции
	
Функция СгенерироватьТекстОбласти_ПроверкаКритериевОтбора() Экспорт
	
	ГруппаОбъектомМетаданных = Метаданные.КритерииОтбора;
	
	НепроверенныеТипы = НепроверенныеТипы(ГруппаОбъектомМетаданных);
	НепроверенныйСостав = НепроверенныйСостав(ГруппаОбъектомМетаданных);
	
	ОбъединенныеНепроверенные = Новый Соответствие;
	Для Каждого КлючИЗначение Из НепроверенныеТипы Цикл
		ОбъединенныеНепроверенные.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	Для Каждого КлючИЗначение Из НепроверенныйСостав Цикл
		ОбъединенныеНепроверенные.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	мСтр = Новый Массив;
	
	мСтр.Добавить("#Область ПроверкаКритериевОтбора");
	мСтр.Добавить();
	
	мСтр.Добавить("Процедура ПроверитьКритерииОтбора(Отказ) Экспорт");
	мСтр.Добавить(Символы.Таб);
	мСтр.Добавить(Символы.Таб + "ПроверенныеТипы = Новый Соответствие;");
	мСтр.Добавить(Символы.Таб + "ПроверенныйСостав = Новый Соответствие;");
	мСтр.Добавить(Символы.Таб);
	
	Для Каждого КлючИЗначение Из ОбъединенныеНепроверенные Цикл
		ОбъектМетаданных = КлючИЗначение.Ключ;
		мСтр.Добавить(Символы.Таб + "ПроверитьКритерийОтбора_" + ОбъектМетаданных.Имя + "(Отказ, ПроверенныеТипы, ПроверенныйСостав);");
	КонецЦикла;
	
	мСтр.Добавить(Символы.Таб);
	мСтр.Добавить(Символы.Таб + "ЗаголовокСообщенияОбОшибке = ""Не выполняется проверка типов критериев отбора:"";");
	мСтр.Добавить(Символы.Таб + "мт_ТестированиеКонфигурации_Служебный.СообщитьОНепроверенныхТипах(ПроверенныеТипы, Отказ, Метаданные.КритерииОтбора, ЗаголовокСообщенияОбОшибке);");
	мСтр.Добавить(Символы.Таб);
	мСтр.Добавить(Символы.Таб + "ЗаголовокСообщенияОбОшибке = ""Не выполняется проверка состава критериев отбора:"";");
	мСтр.Добавить(Символы.Таб + "мт_ТестированиеКонфигурации_Служебный.СообщитьОНепроверенномСоставе(ПроверенныйСостав, Отказ, Метаданные.КритерииОтбора, ЗаголовокСообщенияОбОшибке);");
	мСтр.Добавить(Символы.Таб);
	мСтр.Добавить("КонецПроцедуры");
	мСтр.Добавить();
	
	Для Каждого КлючИЗначение Из ОбъединенныеНепроверенные Цикл
		
		ОбъектМетаданных = КлючИЗначение.Ключ;
		
		мСтр.Добавить("Процедура ПроверитьКритерийОтбора_" + ОбъектМетаданных.Имя + "(Отказ, ПроверенныеТипы, ПроверенныйСостав)");
		мСтр.Добавить(Символы.Таб);
		мСтр.Добавить(Символы.Таб + "ОбъектМетаданных = Метаданные.КритерииОтбора." + ОбъектМетаданных.Имя + ";");
		мСтр.Добавить(Символы.Таб);
		мСтр.Добавить(Символы.Таб + "ОписаниеТипов = ОбъектМетаданных.Тип;");
		мСтр.Добавить(Символы.Таб);
		мСтр.Добавить(Символы.Таб + "ТребуемыеТипы = Новый Массив;");
		
		мТребуемыеТипы = НепроверенныеТипы[ОбъектМетаданных];
		Если мТребуемыеТипы<>Неопределено Тогда
			Для Каждого Тип Из мТребуемыеТипы Цикл
				СтроковоеПредставлениТипа = СтроковоеПредставлениТипа(Тип);
				мСтр.Добавить(Символы.Таб + "ТребуемыеТипы.Добавить(Тип(""" + СтроковоеПредставлениТипа + """));");
			КонецЦикла;
		КонецЕсли;
		
		мСтр.Добавить(Символы.Таб);
		мСтр.Добавить(Символы.Таб + "мт_ТестированиеКонфигурации_Служебный.ПроверитьВхождениеТипов_в_ТипМетаданного(ОбъектМетаданных, ТребуемыеТипы, Отказ, ПроверенныеТипы);");
		мСтр.Добавить(Символы.Таб);
		мСтр.Добавить(Символы.Таб + "ТребуемыйСостав = Новый Массив;");
		
		мТребуемыйСостав = НепроверенныйСостав[ОбъектМетаданных];
		Если мТребуемыйСостав <> Неопределено Тогда
			Для Каждого ЭлементСостава Из мТребуемыйСостав Цикл
				ПредставлениеМетаданного = ПреобразоватьПолноеИмяМетаданногоКоМножественномуЧислу(ЭлементСостава.ПолноеИмя());
				мСтр.Добавить(Символы.Таб + "ТребуемыйСостав.Добавить(Метаданные." + ПредставлениеМетаданного + ");");
			КонецЦикла;
		КонецЕсли;
	
		мСтр.Добавить(Символы.Таб);
		мСтр.Добавить(Символы.Таб + "мт_ТестированиеКонфигурации_Служебный.ПроверитьВхождениеВСостав(ОбъектМетаданных, ТребуемыйСостав, Отказ, ПроверенныйСостав);");
		мСтр.Добавить(Символы.Таб);
		мСтр.Добавить("КонецПроцедуры");
		мСтр.Добавить();
		
	КонецЦикла;
	
	мСтр.Добавить("#КонецОбласти");
	мСтр.Добавить();
	
	ТекстОбласти = Новый ТекстовыйДокумент;
	Для Каждого Строчка Из мСтр Цикл
		ТекстОбласти.ДобавитьСтроку(Строчка);
	КонецЦикла;
	
	Возврат ТекстОбласти;
	
КонецФункции
	
#КонецОбласти

#Область Вспомогательные

Функция СтроковоеПредставлениТипа(Тип)
	
	СтрокаXML = ЗначениеВСтрокуXML(Тип);
	
	//<Type xmlns="http://v8.1c.ru/8.1/data/core" xmlns:d1p1="http://v8.1c.ru/8.1/data/enterprise/current-config" 
	//xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	//xsi:type="Type">d1p1:DocumentRef.АвансовыйОтчет</Type>
	
	Тег = "xsi:type=""Type"">";
	ПозицияТега = Найти(СтрокаXML, Тег);
	Если ПозицияТега = 0 Тогда
		ВызватьИсключение "Ошибка 1 получения представления типа: " + СтрокаXML;
	КонецЕсли;
	
	Подстрока = Сред(СтрокаXML, ПозицияТега + СтрДлина(Тег));
	
	Тег = "</Type>";
	ПозицияТега = Найти(Подстрока, Тег);
	Если ПозицияТега = 0 Тогда
		ВызватьИсключение "Ошибка 2 получения представления типа: " + Подстрока;
	КонецЕсли;
	
	Подстрока = Лев(Подстрока, ПозицияТега - 1); 
	
	ПозицияДвоеточияПосле_d1p1 = СтрНайти(Подстрока, ":");
	Если ПозицияДвоеточияПосле_d1p1 = 0 Тогда
		ВызватьИсключение "Ошибка 3 получения представления типа: " + Подстрока;
	КонецЕсли;
	
	Подстрока = Сред(Подстрока, ПозицияДвоеточияПосле_d1p1 + 1);
	//здесь должно быть "DocumentRef.АвансовыйОтчет"
	
	ПозицияТочки = Найти(Подстрока, ".");
	Если ПозицияТочки = 0 Тогда
		ВызватьИсключение "Ошибка 4 получения представления типа: " + Подстрока;
	КонецЕсли;
	
	ЛеваяЧасть = Лев(Подстрока, ПозицияТочки - 1);
	ПраваяЧасть = Сред(Подстрока, ПозицияТочки + 1);
	
	Если ЛеваяЧасть = "DocumentRef" Тогда 
		ЛеваяЧасть = "ДокументСсылка"
	ИначеЕсли ЛеваяЧасть = "DocumentObject" Тогда 
		ЛеваяЧасть = "ДокументОбъект"
	ИначеЕсли ЛеваяЧасть = "CatalogRef" Тогда 
		ЛеваяЧасть = "СправочникСсылка"
	ИначеЕсли ЛеваяЧасть = "CatalogObject" Тогда 
		ЛеваяЧасть = "СправочникОбъект"
	Иначе 
		ВызватьИсключение "Непредусмотренный вариант: " + ЛеваяЧасть;
	КонецЕсли;
	
	Возврат ЛеваяЧасть + "." + ПраваяЧасть;
	
КонецФункции

Функция ЗначениеВСтрокуXML(Значение)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Значение, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();
КонецФункции

Функция ПреобразоватьПолноеИмяМетаданногоКоМножественномуЧислу(ПолноеИмя)
	
	Результат = ПолноеИмя;
	
	Если СтрНачинаетсяС(Результат, "Документ.") Тогда
		Результат =  "Документы." + Сред(Результат, СтрДлина("Документ.") + 1);
	ИначеЕсли СтрНачинаетсяС(Результат, "Справочник.") Тогда
		Результат = "Справочники." + Сред(Результат, СтрДлина("Справочник.") + 1);
	Иначе
		ВызватьИсключение "Непредусмотренное значение в ПреобразоватьПолноеИмяМетаданногоКоМножественномуЧислу: " + ПолноеИмя;
	КонецЕсли;
	
	Результат = СтрЗаменить(Результат, ".Реквизит.", ".Реквизиты.");
	Результат = СтрЗаменить(Результат, ".ТабличнаяЧасть.", ".ТабличныеЧасти.");
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоРегистрНакопления(МетаданныеРегистра)
	Возврат СтрНачинаетсяС(МетаданныеРегистра.ПолноеИмя(), "РегистрНакопления.");
КонецФункции

Функция ДополнитьСтрокуПробелами(Строка, ТребуемаяДлина, Выравнивание = "прижать влево")
	
	ТекущаяДлина = СтрДлина(Строка);
	Если ТекущаяДлина > ТребуемаяДлина Тогда
		возврат Строка;
	КонецЕсли;
	
	Пробелы = "";
	Для к = ТекущаяДлина+1 По ТребуемаяДлина Цикл
		Пробелы = Пробелы + " ";
	КонецЦикла;
	
	Если Выравнивание = "прижать влево" Тогда
		
		возврат Строка + Пробелы;
		
	ИначеЕсли Выравнивание = "прижать вправо" Тогда
		
		возврат Пробелы + Строка;
		
	ИначеЕсли Выравнивание = "по центру" Тогда
		
		ДлинаПробеловСлева = Окр(СтрДлина(Пробелы)/2, 0);
		ПробелыСлева = Лев(Пробелы, ДлинаПробеловСлева);
		ПробелыСправа = Сред(Пробелы, ДлинаПробеловСлева+1);
		возврат ПробелыСлева + Строка + ПробелыСправа;
		
	Иначе
		
		ВызватьИсключение "Некорректый параметр Выравнивание: "+Выравнивание;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ГенераторСценариевТестирования_VanessaAutomation

//Генерация текстов сценариев для тестирования средствами Vanessa Automation 
//Описание см. https://infostart.ru/public/1250707/

Функция СценарииТестированияВнешнихПечатныхФорм(СтрокаСоединения, ТестированиеВРабочейБазе) Экспорт
	
	Результат = Новый Соответствие;
	
	СценарииТестирования = ПустаяТаблицаСценариевТестирования();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеОтчетыИОбработки.Ссылка КАК Ссылка,
	               |	ДополнительныеОтчетыИОбработки.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	               |ГДЕ
	               |	ДополнительныеОтчетыИОбработки.Публикация <> ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДополнительныеОтчетыИОбработки.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ХранилищеОбработки = Выборка.Ссылка.ХранилищеОбработки;
		ДвоичныеДанные = ХранилищеОбработки.Получить();
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяВременногоФайла);
		
		Попытка
			ВнешняяОбработка.ДобавитьСценарииТестирования(СценарииТестирования);
		Исключение
			ТекстОшибки = "Внешняя печатная форма " + Выборка.Наименование + ": " 
				+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
	УникальныеПользователи = СценарииТестирования.Скопировать(, "Пользователь");
	УникальныеПользователи.Свернуть("Пользователь");
	
	Для Каждого Строчка_Пользователь Из УникальныеПользователи Цикл
		
		ПользовательФичи = Строчка_Пользователь.Пользователь;
		СценарииФичи = СценарииТестирования.НайтиСтроки(Новый Структура("Пользователь", ПользовательФичи));
		
		ТекстФайлаСценариев = Новый	ТекстовыйДокумент;
		
		ТекстФайлаСценариев.ДобавитьСтроку("#language: ru");
		ТекстФайлаСценариев.ДобавитьСтроку("#encoding: utf-8");
		ТекстФайлаСценариев.ДобавитьСтроку("#Сгенерирован обработкой ТекстыСценариевТестированияПечатныхФорм()");
		ТекстФайлаСценариев.ДобавитьСтроку("");
		ТекстФайлаСценариев.ДобавитьСтроку("Функционал: Проверка печатных форм из дополнительных отчетов и обработок "
			+ Суффикс_ПодПользователем(ПользовательФичи));
		ТекстФайлаСценариев.ДобавитьСтроку("");
		ТекстФайлаСценариев.ДобавитьСтроку("Как "+ПользовательФичи);
		ТекстФайлаСценариев.ДобавитьСтроку("Я хочу проверить отсутствие синтаксических ошибок в доработанных печатных формах");
		ТекстФайлаСценариев.ДобавитьСтроку("Чтобы ошибки не возникли при работе пользователей");
		ТекстФайлаСценариев.ДобавитьСтроку("");
		
		ИмяПодключения = ДобавитьТекстПодключенияКлиентаТестирования(ТекстФайлаСценариев, ПользовательФичи, СтрокаСоединения);
	
		Для Каждого Сценарий Из СценарииФичи Цикл
			
			Если ТестированиеВРабочейБазе
				И Сценарий.ВыполнятьТолькоВТестовойБазе Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавитьТекстНачалаСценария(ТекстФайлаСценариев, Сценарий);
			
			Если Сценарий.Действие = Действие_ПроизвольныйСкрипт() Тогда
				ДобавитьТекстПроизвольногоСкрипта(ТекстФайлаСценариев, Сценарий);
			Иначе
				ДобавитьТекстСценарияТестированияПечатнойФормы(ТекстФайлаСценариев, Сценарий);
			КонецЕсли;
			
		КонецЦикла;
		
		ДобавитьТекстОтключенияКлиентаТестирования(ТекстФайлаСценариев, ИмяПодключения);
		
		Результат.Вставить(Строчка_Пользователь.Пользователь, ТекстФайлаСценариев); 
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СценарииТестированияОбъектовКонфигурации(СтрокаСоединения, ТестированиеВРабочейБазе) Экспорт
	
	Результат = Новый Соответствие;
	
	СценарииТестирования = ПустаяТаблицаСценариевТестирования();
	
	Для Каждого Менеджер Из мт_ТестированиеКонфигурации_Настройки.МенеджерыОбъектовСНастройкамиТестирования() Цикл
		Менеджер.ДобавитьСценарииТестирования(СценарииТестирования);
	КонецЦикла;
	
	УникальныеПользователи = СценарииТестирования.Скопировать(, "Пользователь");
	УникальныеПользователи.Свернуть("Пользователь");
	
	Для Каждого Строчка_Пользователь Из УникальныеПользователи Цикл
		
		ПользовательФичи = Строчка_Пользователь.Пользователь;
		СценарииФичи = СценарииТестирования.НайтиСтроки(Новый Структура("Пользователь", ПользовательФичи));
		
		ТекстФайлаСценариев = Новый	ТекстовыйДокумент;
		
		ТекстФайлаСценариев.ДобавитьСтроку("#language: ru");
		ТекстФайлаСценариев.ДобавитьСтроку("#encoding: utf-8");
		ТекстФайлаСценариев.ДобавитьСтроку("#Сгенерирован обработкой СценарииТестированияОбъектовКонфигурации()");
		ТекстФайлаСценариев.ДобавитьСтроку("");
		ТекстФайлаСценариев.ДобавитьСтроку("Функционал: Проверка объектов конфигурации "
			+ Суффикс_ПодПользователем(ПользовательФичи));
		ТекстФайлаСценариев.ДобавитьСтроку("");
		ТекстФайлаСценариев.ДобавитьСтроку("Как " + ПользовательФичи);
		ТекстФайлаСценариев.ДобавитьСтроку("Я хочу проверить встроенные печатные формы, открытие/проведение документов/справочников");
		ТекстФайлаСценариев.ДобавитьСтроку("Чтобы проверить свои доработки конфигурации");
		ТекстФайлаСценариев.ДобавитьСтроку("");
		
		ИмяПодключения = ДобавитьТекстПодключенияКлиентаТестирования(ТекстФайлаСценариев, ПользовательФичи, СтрокаСоединения);
		
		ТекстФайлаСценариев.ДобавитьСтроку("");
	
		Для Каждого Сценарий Из СценарииФичи Цикл
			
			Если ТестированиеВРабочейБазе
				И Сценарий.ВыполнятьТолькоВТестовойБазе Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстФайлаСценариев.ДобавитьСтроку("Сценарий: " + Сценарий.Наименование);
			ТекстФайлаСценариев.ДобавитьСтроку("");
			Если ЗначениеЗаполнено(Сценарий.Комментарий) Тогда
				ТекстФайлаСценариев.ДобавитьСтроку("	* " + Сценарий.Комментарий);
			КонецЕсли;
			
			Если Сценарий.Действие = Действие_ПроизвольныйСкрипт() Тогда
				
				ДобавитьТекстПроизвольногоСкрипта(ТекстФайлаСценариев, Сценарий);
				
			ИначеЕсли Сценарий.Действие = Действие_ФормированиеПечатнойФормы() Тогда
				
				ДобавитьТекстСценарияТестированияПечатнойФормы(ТекстФайлаСценариев, Сценарий);
			
			ИначеЕсли Сценарий.Действие = Действие_Открытие() Тогда
				
				Если Не ЗначениеЗаполнено(Сценарий.ИмяФормы) Тогда
					ВызватьИсключение "Не указано имя формы в сценарии " + Сценарий.Наименование;
				КонецЕсли;
			
				ТекстФайлаСценариев.ДобавитьСтроку("	Когда я открываю навигационную ссылку """ + Сценарий.НавигационнаяСсылка + """");
				ТекстФайлаСценариев.ДобавитьСтроку("	Тогда открылась форма с именем '" + Сценарий.ИмяФормы + "'");
				ТекстФайлаСценариев.ДобавитьСтроку("	И Я закрываю текущее окно");
				ТекстФайлаСценариев.ДобавитьСтроку("	");
				
			ИначеЕсли Сценарий.Действие = Действие_Запись() Тогда
				
				ВызватьИсключение "Проверка записи не реализована";
				
			Иначе
			
				ВызватьИсключение СтрШаблон("Непредусмотренное действие сценария тестирования %1: %2", Сценарий.Наименование, Сценарий.Действие);;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДобавитьТекстОтключенияКлиентаТестирования(ТекстФайлаСценариев, ИмяПодключения);
		
		Результат.Вставить(Строчка_Пользователь.Пользователь, ТекстФайлаСценариев); 
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьТекстНачалаСценария(ТекстФайлаСценариев, Сценарий)
	
	ТекстФайлаСценариев.ДобавитьСтроку("Сценарий: " + Сценарий.Наименование);
	ТекстФайлаСценариев.ДобавитьСтроку("");
	Если ЗначениеЗаполнено(Сценарий.Комментарий) Тогда
		ТекстФайлаСценариев.ДобавитьСтроку("	* " + Сценарий.Комментарий);
	КонецЕсли;
			
КонецПроцедуры

Процедура ДобавитьТекстПроизвольногоСкрипта(ТекстФайлаСценариев, Сценарий)
		
	Для Каждого СтрокаПроизвольногоСкрипта Из Сценарий.СтрокиПроизвольногоСкрипта Цикл
		ТекстФайлаСценариев.ДобавитьСтроку("	" + СтрокаПроизвольногоСкрипта);
	КонецЦикла;
	ТекстФайлаСценариев.ДобавитьСтроку("	");
		
КонецПроцедуры

Процедура ДобавитьТекстСценарияТестированияПечатнойФормы(ТекстФайлаСценариев, Сценарий)
	
	ТекстФайлаСценариев.ДобавитьСтроку("	Когда я открываю навигационную ссылку """ + Сценарий.НавигационнаяСсылка + """");
	
	КомандаПоИмени = Истина;
	КомандаПоЗаголовкуКнопки = Ложь;
	
	Для Каждого Команда Из Сценарий.Команды Цикл
		Добавить_Один_ТекстСценарияТестированияПечатнойФормы(ТекстФайлаСценариев, Сценарий, Команда, КомандаПоИмени);
	КонецЦикла;
	
	Для Каждого Команда Из Сценарий.Команды_ПоЗаголовку Цикл
		Добавить_Один_ТекстСценарияТестированияПечатнойФормы(ТекстФайлаСценариев, Сценарий, Команда, КомандаПоЗаголовкуКнопки);
	КонецЦикла;
	
	ТекстФайлаСценариев.ДобавитьСтроку("	И Я закрываю текущее окно"); //окно объекта навигационной ссылки
	ТекстФайлаСценариев.ДобавитьСтроку("	");
		
КонецПроцедуры

Процедура Добавить_Один_ТекстСценарияТестированияПечатнойФормы(ТекстФайлаСценариев, Сценарий, Команда, КомандаПоИмени=Истина)
	
	Если КомандаПоИмени Тогда
		ТекстФайлаСценариев.ДобавитьСтроку("	И я нажимаю на кнопку с именем 'ПодменюПечатьОбычное_" + Команда + "'");
	Иначе //по заголовку кнопки
		ТекстФайлаСценариев.ДобавитьСтроку("	И я нажимаю на кнопку '" + Команда + "'");
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Сценарий.ИмяФормыОтчета) Тогда
		ТекстФайлаСценариев.ДобавитьСтроку("	Тогда открылась форма с именем '" + Сценарий.ИмяФормыОтчета + "'");
	Иначе
		ТекстФайлаСценариев.ДобавитьСтроку("	Тогда открылась форма с именем 'ОбщаяФорма.ПечатьДокументов'");
	КонецЕсли;
	
	ИмяТабличногоДокумента = Сценарий.ИмяТабличногоДокумента;
	Если Не ЗначениеЗаполнено(ИмяТабличногоДокумента) Тогда
		ИмяТабличногоДокумента = "ТекущаяПечатнаяФорма";
	КонецЕсли;
	
	Если Сценарий.СтрокиПроизвольногоСкрипта.Количество() = 0 Тогда
		ТекстФайлаСценариев.ДобавитьСтроку("	И в табличном документе '" + ИмяТабличногоДокумента + "' я перехожу к ячейке ""R1C1""");
	Иначе
		ДобавитьТекстПроизвольногоСкрипта(ТекстФайлаСценариев, Сценарий);
	КонецЕсли;
	
	ТекстФайлаСценариев.ДобавитьСтроку("	И Я закрываю текущее окно"); //окно печатной формы
	ТекстФайлаСценариев.ДобавитьСтроку("	");
		
КонецПроцедуры

Функция ДобавитьТекстПодключенияКлиентаТестирования(ТекстФайлаСценариев, Пользователь, СтрокаСоединения)
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		ИмяПодключения = "ТестоваяБаза_" + Пользователь;
		ИмяИПарольПользователя = мт_ТестированиеКонфигурации_Настройки.ИмяИПарольПользователя(Пользователь);
		ИмяПользователя = ИмяИПарольПользователя.Имя;
		ПарольПользователя = ИмяИПарольПользователя.Пароль;
	Иначе
		ИмяПодключения = "ТестоваяБаза_ПолныеПрава";
		ИмяПользователя = "";
		ПарольПользователя = "";
	КонецЕсли;
	
	//для красоты
	ШиринаКолонки_ИмяПодключения = 30;
	ШиринаКолонки_СтрокаСоединения = 50;
	ШиринаКолонки_Логин = 20;
	ШиринаКолонки_Пароль = 15;
		
	ТекстФайлаСценариев.ДобавитьСтроку("Сценарий: Подключение клиента тестирования '"+ИмяПодключения+"'");
	ТекстФайлаСценариев.ДобавитьСтроку("	Когда Я подключаю клиент тестирования с параметрами:");
	ТекстФайлаСценариев.ДобавитьСтроку(
		СтрШаблон("	| %1| 'Синоним'     | 'Порт' | %2| %3| %4| 'Запускаемая обработка' |  'Дополнительные параметры строки запуска'  |"
			, ДополнитьСтрокуПробелами("'Имя подключения'", ШиринаКолонки_ИмяПодключения)
			, ДополнитьСтрокуПробелами("'Строка соединения'", ШиринаКолонки_СтрокаСоединения)
			, ДополнитьСтрокуПробелами("'Логин'", ШиринаКолонки_Логин)
			, ДополнитьСтрокуПробелами("'Пароль'", ШиринаКолонки_Пароль)
		));
	ТекстФайлаСценариев.ДобавитьСтроку(
		СтрШаблон("	| %1| ''            | '0'    | %2| %3| %4| ''                      |  ''                                         |"
			, ДополнитьСтрокуПробелами("'"+ИмяПодключения+"'", ШиринаКолонки_ИмяПодключения)
			, ДополнитьСтрокуПробелами("'"+СтрокаСоединения+"'", ШиринаКолонки_СтрокаСоединения)
			, ДополнитьСтрокуПробелами("'"+ИмяПользователя+"'", ШиринаКолонки_Логин)
			, ДополнитьСтрокуПробелами("'"+ПарольПользователя+"'", ШиринаКолонки_Пароль)
		));
		
	ТекстФайлаСценариев.ДобавитьСтроку("");
	
	Возврат ИмяПодключения;

КонецФункции

Процедура ДобавитьТекстОтключенияКлиентаТестирования(ТекстФайлаСценариев, ИмяПодключения)
	
	ТекстФайлаСценариев.ДобавитьСтроку("Сценарий: Отключение клиента тестирования '"+ИмяПодключения+"'");
	ТекстФайлаСценариев.ДобавитьСтроку("	И я закрываю TestClient """+ИмяПодключения+"""");
	ТекстФайлаСценариев.ДобавитьСтроку("");
	
КонецПроцедуры

Функция Суффикс_ПодПользователем(Пользователь)
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		возврат "под пользователем " + Пользователь;
	Иначе
		возврат "под полными правами";
	КонецЕсли;
	
КонецФункции

Функция ПустаяТаблицаСценариевТестирования()
	
	ТаблицаСценариев = Новый ТаблицаЗначений;
	ТаблицаСценариев.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
	ТаблицаСценариев.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	ТаблицаСценариев.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	ТаблицаСценариев.Колонки.Добавить("НавигационнаяСсылка", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	ТаблицаСценариев.Колонки.Добавить("Действие", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаСценариев.Колонки.Добавить("ВыполнятьТолькоВТестовойБазе", Новый ОписаниеТипов("Булево"));
	
	//при проверке просмотра/записи справочников, документов
	ТаблицаСценариев.Колонки.Добавить("ИмяФормы", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	ТаблицаСценариев.Колонки.Добавить("ДополнительныеСтрокиСкрипта", Новый ОписаниеТипов("Массив"));
	
	//при проверке печатных форм
	ТаблицаСценариев.Колонки.Добавить("ИмяФормыОтчета", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100))); //по умолчанию "ОбщаяФорма.ПечатьДокументов"
	ТаблицаСценариев.Колонки.Добавить("ИмяТабличногоДокумента", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50))); //по умолчанию "ТекущаяПечатнаяФорма"
																															//для отчетов на СКД "ОтчетТабличныйДокумент"
	//имена кнопок																														
	ТаблицаСценариев.Колонки.Добавить("Команды", Новый ОписаниеТипов("Массив")); 
	//заголовки кнопок. Для ситауции типа печати ТОРГ-12, где идентификатор печатной формы одинаковый для нескольких вариантов печ. форм
	ТаблицаСценариев.Колонки.Добавить("Команды_ПоЗаголовку", Новый ОписаниеТипов("Массив"));
	
	ТаблицаСценариев.Колонки.Добавить("СтрокиПроизвольногоСкрипта", Новый ОписаниеТипов("Массив"));
	
	возврат ТаблицаСценариев;
	
КонецФункции

Функция Действие_ФормированиеПечатнойФормы() Экспорт
	возврат 0;
КонецФункции

Функция Действие_Открытие() Экспорт
	возврат 1;
КонецФункции

Функция Действие_Запись() Экспорт
	возврат 2;
КонецФункции

Функция Действие_ПроизвольныйСкрипт() Экспорт
	возврат 3;
КонецФункции

Функция ПроверитьНаличиеСценариевТестирования_ПечатныеФормы(ВнешнийОбъект) Экспорт
	
	ТекстСообщенияОбОшибке = "Не указаны сценарии тестирования! См. описание в общем модуле ""мт_ТестированиеКонфигурации_Служебный""";
	
	СценарииТестирования = ПустаяТаблицаСценариевТестирования();
	Попытка
		ВнешнийОбъект.ДобавитьСценарииТестирования(СценарииТестирования);
		Если СценарииТестирования.Количество() = 0 Тогда
			ВызватьИсключение ТекстСообщенияОбОшибке;
		КонецЕсли;
	Исключение
		ВызватьИсключение ТекстСообщенияОбОшибке;
	КонецПопытки;

КонецФункции

Процедура ДобавитьТекстВСценарий(Сценарий, Текст) Экспорт
	
	Для н=1 По СтрЧислоСтрок(Текст) Цикл
		Сценарий.СтрокиПроизвольногоСкрипта.Добавить(СтрПолучитьСтроку(Текст, н));
	КонецЦикла;

КонецПроцедуры

//пример процедуры ДобавитьСценарииТестирования в модуле внешнего отчета/обработки:

//ПРИМЕР №1. Простая проверка

//Процедура ДобавитьСценарииТестирования(СценарииТестирования) Экспорт
//	
//	Сценарий = СценарииТестирования.Добавить();
//	Сценарий.Наименование = "Формирование печатной формы ""Акт о списании товаров (ТОРГ-16)""";
//	Сценарий.Комментарий = "Списание из эксплуатации № 00УП-000005 от 31.03.2020";
//	Сценарий.НавигационнаяСсылка = "e1cib/data/Документ.СписаниеИзЭксплуатации?ref=918700155d90cf0011ea88979ad3f7e3";
//	
//	мКоманды = Новый Массив;
//	Для Каждого Команда Из СведенияОВнешнейОбработке().Команды Цикл
//		мКоманды.Добавить(Команда.Идентификатор);
//	КонецЦикла;
//	
//	Сценарий.Команды = мКоманды;
//	
//КонецПроцедуры

//ПРИМЕР № 2. Произвольный скрипт

//Процедура ДобавитьСценарииТестирования(СценарииТестирования) Экспорт
//	
//	Сценарий = СценарииТестирования.Добавить();
//	Сценарий.Наименование = "Формирование печатной формы ""Паспорт готового изделия""";
//	Сценарий.Комментарий = "Проверка ОКК № 000003799 от 22.10.2018";
//	
//	Сценарий.ПроизвольныйСкрипт = Истина;
//	
//	|	Когда я открываю навигационную ссылку ""e1cib/data/Документ.мт_ПроверкаОТК?ref=80deac220b889cff11e8d5f8b14b622f""");
//	|	И я нажимаю на кнопку с именем 'ПодменюПечатьОбычное_ПаспортГотовогоИзделия'");
//	|	Тогда открылось окно 'Паспорт готового изделия'");
//	|	И в поле 'Поместить в папку' я ввожу текст 'C:\Users\bexpert\Тест'");
//	|	И я нажимаю на кнопку 'Сформировать без сохранения'");
//	|	Тогда открылось окно 'Показать папку с паспортами'");
//	|	И я нажимаю на кнопку 'Нет'");
//	
//КонецПроцедуры

//ПРИМЕР №3. В этой внешней печатной форме проверка не нужна

//Процедура ДобавитьСценарииТестирования(СценарииТестирования) Экспорт
//	
//	Сценарий = СценарииТестирования.Добавить();
//	Сценарий.Наименование = "Обработка ""Заполнить регистр (мт) Движение производственных партий""";
//	Сценарий.Комментарий = "Проверка не требуется";
//	
//	Сценарий.ПроизвольныйСкрипт = Истина;
//	
//КонецПроцедуры

//ПРИМЕР №4. Открытие документа пользователем с ограниченными правами

//Процедура ДобавитьСценарииТестирования(СценарииТестирования) Экспорт
//	
//	Сценарий = СценарииТестирования.Добавить();
//	
//	Сценарий.Пользователь = мт_ТестированиеКонфигурации_Настройки.Пользователь_МастерСборки();
//	Сценарий.Действие = мт_ТестированиеКонфигурации_Служебный.Действие_Открытие();
//	
//	Сценарий.Наименование = "Возможность просмотра документа мастером сборки";
//	Сценарий.Комментарий = "Проверка прав просмотра ОКК № 000007834 от 09.06.2020";
//	Сценарий.НавигационнаяСсылка = "e1cib/data/Документ.мт_ПроверкаОТК?ref=918800155d90cf0011eaaa4b43515fb3";
//	Сценарий.Комментарий = "Проверка открытия ОКК № 000007834 от 09.06.2020";
//	Сценарий.ИмяФормы = "Документ.мт_ПроверкаОТК.Форма.ФормаДокумента";
//	
//КонецПроцедуры

//ПРИМЕР №5. Формирование встроенной печатной формы
 
//Процедура ДобавитьСценарииТестирования(СценарииТестирования) Экспорт
//	
//	Сценарий = СценарииТестирования.Добавить();
//	Сценарий.Действие = мт_ТестированиеКонфигурации_Служебный.Действие_ФормированиеПечатнойФормы();
//	Сценарий.Наименование = "Формирование печатных форм производственной партии";
//	Сценарий.Комментарий = "Производственная партия П555Мр20-3";
//	Сценарий.НавигационнаяСсылка = "e1cib/data/Документ.мт_ПроизводственныеПартии?ref=918700155d90cf0011ea6790593e9fbd";
//	
//	мКоманды = Новый Массив;
//	мКоманды.Добавить("МаршрутнаяКарта");
//	мКоманды.Добавить("СерийныеНомераПартии");
//	Сценарий.Команды = мКоманды;
//	
//	////
//	
//	Сценарий = СценарииТестирования.Добавить();
//	Сценарий.Действие = мт_ТестированиеКонфигурации_Служебный.Действие_ФормированиеПечатнойФормы();
//	Сценарий.Наименование = "Формирование печатных форм производственной партии (2)";
//	Сценарий.Комментарий = "Производственная партия П555Мр20-3";
//	Сценарий.НавигационнаяСсылка = "e1cib/data/Документ.мт_ПроизводственныеПартии?ref=918700155d90cf0011ea6790593e9fbd";
//	
//	мКоманды = Новый Массив;
//	мКоманды.Добавить("ВыполнениеПроизводственныхОпераций");
//	
//	Сценарий.ИмяФормыОтчета = "Отчет.мт_ВыполнениеПроизводственныхОпераций.ФормаОбъекта";
//	Сценарий.Команды = мКоманды;
//	
//	////
//	
//	Сценарий = СценарииТестирования.Добавить();
//	Сценарий.Действие = мт_ТестированиеКонфигурации_Служебный.Действие_ФормированиеПечатнойФормы();
//	Сценарий.Наименование = "Формирование печатных форм производственной партии (3)";
//	Сценарий.Комментарий = "Производственная партия П555Мр20-3";
//	Сценарий.НавигационнаяСсылка = "e1cib/data/Документ.мт_ПроизводственныеПартии?ref=918700155d90cf0011ea6790593e9fbd";
//	
//	мКоманды = Новый Массив;
//	мКоманды.Добавить("РезультатыПроверкиОТК_ПоПартии");
//	
//	Сценарий.ИмяФормыОтчета = "Отчет.мт_РезультатыПроверкиОТК_ПоПартии.ФормаОбъекта";
//	Сценарий.Команды = мКоманды;
//	
//КонецПроцедуры

#КонецОбласти

