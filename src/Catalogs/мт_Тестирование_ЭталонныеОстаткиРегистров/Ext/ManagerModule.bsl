
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция НесоответствиеОстатков(СправочникСсылка) Экспорт
	
	ЭталонныеОстатки = СправочникСсылка.СохраненныеДанные.Получить();
	
	ИмяРегистра = СправочникСсылка.Наименование;
	ДатаОстатков = СправочникСсылка.ДатаОстатков;
	МетаданныеРегистра = Метаданные.РегистрыНакопления[ИмяРегистра];
	
	КонтролируемыеИзмерения = Новый Массив;
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Если ЭталонныеОстатки.Колонки.Найти(Измерение.Имя) <> Неопределено Тогда 
			КонтролируемыеИзмерения.Добавить(Измерение);
		КонецЕсли;
	КонецЦикла;
	
	КонтролируемыеРесурсы = Новый Массив;
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		Если ЭталонныеОстатки.Колонки.Найти(Ресурс.Имя+"Остаток") <> Неопределено Тогда 
			КонтролируемыеРесурсы.Добавить(Ресурс);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОстатков", СправочникСсылка.ДатаОстатков);
	Запрос.УстановитьПараметр("ЭталонныеОстатки", ЭталонныеОстатки);
	
	Запрос.Текст = ТекстЗапросаНесоответствий(МетаданныеРегистра, ИмяРегистра, КонтролируемыеИзмерения, КонтролируемыеРесурсы);
	
	ТаблицаНесоответствий = Запрос.Выполнить().Выгрузить();
	ТаблицаНесоответствий.Колонки.Удалить("dummy");
	
	Для Каждого Ресурс Из КонтролируемыеРесурсы Цикл
		ТаблицаНесоответствий.Колонки[Ресурс.Имя + "Было"].Заголовок = Ресурс.Синоним + " (было)";
		ТаблицаНесоответствий.Колонки[Ресурс.Имя + "Стало"].Заголовок = Ресурс.Синоним + " (стало)";
	КонецЦикла;
	
	Если ТаблицаНесоответствий.Количество()>0 Тогда
		ЕстьНесоответствия = Истина;
		МассивШириныКолонок = Новый Массив;
		ТабличныйДокумент = ВывестиРезультатОдногоЗапроса(ИмяРегистра, ТаблицаНесоответствий, МассивШириныКолонок);
	Иначе
		ЕстьНесоответствия = Ложь;
		ТабличныйДокумент = Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("ИмяРегистра, ДатаОстатков, ЕстьНесоответствия, ТабличныйДокумент", 
		ИмяРегистра, ДатаОстатков, ЕстьНесоответствия, ТабличныйДокумент);
	
КонецФункции

Функция ТекстЗапросаНесоответствий(МетаданныеРегистра, ИмяРегистра, КонтролируемыеИзмерения, КонтролируемыеРесурсы)
	
	мЧастиЗапроса = Новый Массив;
	
	//текущие остатки
	мЧастиЗапроса.Добавить("ВЫБРАТЬ
	               |");
	
	Для Каждого Измерение Из КонтролируемыеИзмерения Цикл
		мЧастиЗапроса.Добавить("	Т." + Измерение.Имя + " КАК " + Измерение.Имя + ",");
	КонецЦикла;
	
	Для Каждого Ресурс Из КонтролируемыеРесурсы Цикл
		мЧастиЗапроса.Добавить("	Т." + Ресурс.Имя + "Остаток КАК " + Ресурс.Имя + ",");
	КонецЦикла;
	
	мЧастиЗапроса.Добавить("	0 КАК dummy");
	
	мЧастиЗапроса.Добавить("ПОМЕСТИТЬ ВТ_ТекущиеОстатки
	               |ИЗ
	               |	РегистрНакопления."+ИмяРегистра+".Остатки(&ДатаОстатков, ) КАК Т;
				   |
				   |/////////////////////////////////
				   |");
	
	//эталонные остатки
	мЧастиЗапроса.Добавить("ВЫБРАТЬ
	               |");
	
	Для Каждого Измерение Из КонтролируемыеИзмерения Цикл
		мЧастиЗапроса.Добавить("	Т." + Измерение.Имя + " КАК " + Измерение.Имя + ",");
	КонецЦикла;
	
	Для Каждого Ресурс Из КонтролируемыеРесурсы Цикл
		мЧастиЗапроса.Добавить("	Т." + Ресурс.Имя + "Остаток КАК " + Ресурс.Имя + ",");
	КонецЦикла;
	
	мЧастиЗапроса.Добавить("	0 КАК dummy");
	
	мЧастиЗапроса.Добавить("ПОМЕСТИТЬ ВТ_ЭталонныеОстатки
	               |ИЗ
	               |	&ЭталонныеОстатки КАК Т;
				   |
				   |/////////////////////////////////
				   |");
	

	//сравнение текущих и эталонных остатков
	
	мЧастиЗапроса.Добавить("ВЫБРАТЬ
	               |");
	
	Для Каждого Измерение Из КонтролируемыеИзмерения Цикл
		мЧастиЗапроса.Добавить("	Т." + Измерение.Имя + ",");
	КонецЦикла;
	
	Для Каждого Ресурс Из КонтролируемыеРесурсы Цикл
		мЧастиЗапроса.Добавить("	0 КАК " + Ресурс.Имя + "Было,");
		мЧастиЗапроса.Добавить("	Т." + Ресурс.Имя + " КАК " + Ресурс.Имя + "Стало,");
	КонецЦикла;
	
	мЧастиЗапроса.Добавить("	Т.dummy");
	
	мЧастиЗапроса.Добавить("ПОМЕСТИТЬ ВТ_Сравнение 
				   |ИЗ
	               |	ВТ_ТекущиеОстатки КАК Т
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |");
	
	мЧастиЗапроса.Добавить("ВЫБРАТЬ
	               |");
	
	Для Каждого Измерение Из КонтролируемыеИзмерения Цикл
		мЧастиЗапроса.Добавить("	Т." + Измерение.Имя + ",");
	КонецЦикла;
	
	Для Каждого Ресурс Из КонтролируемыеРесурсы Цикл
		мЧастиЗапроса.Добавить("	Т." + Ресурс.Имя + " КАК " + Ресурс.Имя + "Было,");
		мЧастиЗапроса.Добавить("	0 КАК " + Ресурс.Имя + "Стало,");
	КонецЦикла;
	
	мЧастиЗапроса.Добавить("	Т.dummy");
	
	мЧастиЗапроса.Добавить("ИЗ
	               |	ВТ_ЭталонныеОстатки КАК Т
				   |;");
	
	// группировка
	мЧастиЗапроса.Добавить("ВЫБРАТЬ
	               |");
	
	Для Каждого Измерение Из КонтролируемыеИзмерения Цикл
		мЧастиЗапроса.Добавить("	Т." + Измерение.Имя + ",");
	КонецЦикла;
	
	Для Каждого Ресурс Из КонтролируемыеРесурсы Цикл
		мЧастиЗапроса.Добавить("	СУММА(Т." + Ресурс.Имя + "Было) КАК " + Ресурс.Имя + "Было,");
		мЧастиЗапроса.Добавить("	СУММА(Т." + Ресурс.Имя + "Стало) КАК " + Ресурс.Имя + "Стало,");
	КонецЦикла;
	
	мЧастиЗапроса.Добавить("	Т.dummy");
	
	мЧастиЗапроса.Добавить("ПОМЕСТИТЬ ВТ_Сгруппированная 
				   |ИЗ
	               |	ВТ_Сравнение КАК Т
				   |СГРУППИРОВАТЬ ПО");
	
	Для Каждого Измерение Из КонтролируемыеИзмерения Цикл
		мЧастиЗапроса.Добавить("	Т." + Измерение.Имя + ",");
	КонецЦикла;
	
	мЧастиЗапроса.Добавить("	Т.dummy");
	
	мЧастиЗапроса.Добавить(";
		|//////////////////////////////////////");
	
	// получение расхождений
	
	мЧастиЗапроса.Добавить("ВЫБРАТЬ
	               |");
	
	Для Каждого Измерение Из КонтролируемыеИзмерения Цикл
		мЧастиЗапроса.Добавить("	Т." + Измерение.Имя + ",");
	КонецЦикла;
	
	Для Каждого Ресурс Из КонтролируемыеРесурсы Цикл
		мЧастиЗапроса.Добавить("	Т." + Ресурс.Имя + "Было,");
		мЧастиЗапроса.Добавить("	Т." + Ресурс.Имя + "Стало,");
	КонецЦикла;
	
	мЧастиЗапроса.Добавить("	Т.dummy");
	
	мЧастиЗапроса.Добавить("ИЗ
	               |	ВТ_Сгруппированная КАК Т
				   |ГДЕ");
	
	мЧастиЗапроса.Добавить("	ЛОЖЬ");
	Для Каждого Ресурс Из КонтролируемыеРесурсы Цикл
		мЧастиЗапроса.Добавить("	ИЛИ Т." + Ресурс.Имя + "Было <> Т." + Ресурс.Имя + "Стало");
	КонецЦикла;
	
	мЧастиЗапроса.Добавить("АВТОУПОРЯДОЧИВАНИЕ");
	
	Возврат СтрСоединить(мЧастиЗапроса, Символы.ВК + Символы.ПС);
	
КонецФункции

Функция СохраненныеОстатки(СправочникСсылка) Экспорт
	
	ЭталонныеОстатки = СправочникСсылка.СохраненныеДанные.Получить();
	
	ИмяРегистра = СправочникСсылка.Наименование;
	ДатаОстатков = СправочникСсылка.ДатаОстатков;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭталонныеОстатки", ЭталонныеОстатки);
	
	Запрос.Текст = ТекстЗапросаСохраненныхОстатков(ЭталонныеОстатки.Колонки);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Колонки.Удалить("dummy");
	
	МассивШириныКолонок = Новый Массив;
	ТабличныйДокумент = ВывестиРезультатОдногоЗапроса(ИмяРегистра, Таблица, МассивШириныКолонок);
	
	Возврат Новый Структура("ИмяРегистра, ДатаОстатков, ТабличныйДокумент", 
		ИмяРегистра, ДатаОстатков, ТабличныйДокумент);
	
КонецФункции

Функция ТекстЗапросаСохраненныхОстатков(КолонкиТаблицы)
	
	мЧастиЗапроса = Новый Массив;
	
	//эталонные остатки
	мЧастиЗапроса.Добавить("ВЫБРАТЬ
	               |");
	
	Для Каждого Колонка Из КолонкиТаблицы Цикл
		мЧастиЗапроса.Добавить("	Т." + Колонка.Имя + " КАК " + Колонка.Имя + ",");
	КонецЦикла;
	
	мЧастиЗапроса.Добавить("	0 КАК dummy");
	
	мЧастиЗапроса.Добавить("ПОМЕСТИТЬ ВТ_ЭталонныеОстатки
				   |ИЗ
	               |	&ЭталонныеОстатки КАК Т;
				   |////////////
				   |ВЫБРАТЬ * ИЗ ВТ_ЭталонныеОстатки КАК Т");
	

	мЧастиЗапроса.Добавить("АВТОУПОРЯДОЧИВАНИЕ");
	
	Возврат СтрСоединить(мЧастиЗапроса, Символы.ВК + Символы.ПС);
	
КонецФункции

//Позаимствовано из ИнструментыРазработчикаКонсольЗапросов
#Область Вывод_в_табличный_документ

Функция ВывестиРезультатОдногоЗапроса(ИмяЗапроса, РезультатЗапроса, МассивШириныКолонок) Экспорт
	
	ВыходнойМакет = Новый ТабличныйДокумент;
	МакетОдногоЗапроса = Новый ТабличныйДокумент;
	
	Если РезультатЗапроса = Неопределено Тогда 
		Возврат ВыходнойМакет;
	КонецЕсли;
	
	КоличествоСтрок = РезультатЗапроса.Количество();
	
	МакетОдногоЗапроса.Очистить();
	ВыходнойМакет.Очистить();
	
	УровеньВерхний = 1;
	УровеньЗаголовкаИДеталей = 2;
	
	// Вывод в табличный документ.
	ЗаголовкиКолонок = ВывестиЗаголовкиКолонок(РезультатЗапроса, МассивШириныКолонок);
	ПараметрыВыводаЗапроса = Новый Структура;
	ПараметрыВыводаЗапроса.Вставить("МассивШириныКолонок", МассивШириныКолонок); 
	ПараметрыВыводаЗапроса.Вставить("КоличествоСтрок", КоличествоСтрок);
	ПараметрыВыводаЗапроса.Вставить("ИспользованиеЧередования", Ложь);
	Детали = ВывестиДетали(РезультатЗапроса, ПараметрыВыводаЗапроса);
	Заголовок = ВывестиЗаголовокЗапроса(ИмяЗапроса, КоличествоСтрок);
	
	МакетОдногоЗапроса.НачатьАвтогруппировкуСтрок();
	
	МакетОдногоЗапроса.Вывести(Заголовок, УровеньВерхний);
	МакетОдногоЗапроса.Вывести(ЗаголовкиКолонок, УровеньЗаголовкаИДеталей);
	МакетОдногоЗапроса.Вывести(Детали, УровеньЗаголовкаИДеталей);
	
	МакетОдногоЗапроса.ЗакончитьАвтогруппировкуСтрок();
	
	УстановкаАвтоШирины(ВыходнойМакет, МассивШириныКолонок);
	ВыходнойМакет.Вывести(МакетОдногоЗапроса).СоздатьФорматСтрок();
	
	Возврат ВыходнойМакет;
КонецФункции

Функция ВывестиЗаголовокЗапроса(ИмяЗапроса,КоличествоСтрок)
	Заголовок 	= Новый ТабличныйДокумент;
	
	МакетВывода = ПолучитьМакет("РезультатВыполненияЗапроса");
	
	ОбластьЗаголовок 	= МакетВывода.ПолучитьОбласть("ЗапросИмя");
	ОбластьЗаголовок.Параметры.ИмяЗапроса  		= ИмяЗапроса;
	ОбластьЗаголовок.Параметры.КоличествоСтрок	= КоличествоСтрок;
	Заголовок.Вывести(ОбластьЗаголовок);
	
	Возврат Заголовок;
КонецФункции

Функция ВывестиЗаголовкиКолонок(Результат, МассивШириныКолонок)
	МакетВывода 				= ПолучитьМакет("РезультатВыполненияЗапроса");
	
	ВерхнийЗаголовокКолонок		= Новый ТабличныйДокумент;
	
	ЗаголовокКолонок				= Новый ТабличныйДокумент;
	ОбластьЗаголовкиКолонок 	= МакетВывода.ПолучитьОбласть("ОбластьЯчейки");
	
	Область 	  					= ОбластьЗаголовкиКолонок.Область();
	Область.Шрифт 					= Новый Шрифт(,, Ложь);
	Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	Область.ЦветФона				= Новый Цвет(204, 192, 133);
	
	Индекс = 0;
	// Вывод заголовка таблицы.
	Для каждого Стр Из Результат.Колонки Цикл
		Если ЗначениеЗаполнено(Стр.Заголовок) Тогда
			текЗаголовок = Стр.Заголовок;
		Иначе
			текЗаголовок = Стр.Имя;
		КонецЕсли;
		УстановкаМаксимальнойШириныВМассив(Индекс, Стр.Имя, МассивШириныКолонок);
		ОбластьЗаголовкиКолонок.Параметры.Значение	= текЗаголовок;
		Об = ЗаголовокКолонок.Присоединить(ОбластьЗаголовкиКолонок);
		Об.ШиринаКолонки = МассивШириныКолонок.Получить(Индекс);
		Индекс	= Индекс + 1;
	КонецЦикла;                          
	ВерхнийЗаголовокКолонок.Вывести(ЗаголовокКолонок);
	
	Возврат ВерхнийЗаголовокКолонок;
КонецФункции

Функция ВывестиДетали(Результат, ПараметрыВыводаЗапроса)
	Детали = Новый ТабличныйДокумент;
	Уровень = 1;
	Детали.НачатьАвтогруппировкуСтрок();
	
	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда
		КоличествоКолонок = Результат.Колонки.Количество();
		ВывестиДеталиБезИерархии(Детали, Результат, ПараметрыВыводаЗапроса, Уровень, КоличествоКолонок);
	КонецЕсли;
	
	Детали.ЗакончитьАвтогруппировкуСтрок();
	Возврат Детали;
КонецФункции

Процедура ВывестиДеталиБезИерархии(ОбщиеДетали, Результат, ПараметрыВыводаЗапроса, Уровень, КоличествоКолонок)
	
	МакетВывода = ПолучитьМакет("РезультатВыполненияЗапроса");
	ИндексСтроки = 1;
	
	Для каждого Строка Из Результат Цикл
		Детали = Новый ТабличныйДокумент;
		ОбластьДетали = МакетВывода.ПолучитьОбласть("ОбластьЯчейки");
		
		Область = ОбластьДетали.ТекущаяОбласть;
		Область.Шрифт = Новый Шрифт(,, Ложь);
		Область.ЦветФона = ОпределитьЦветФонаПоИндексу(ИндексСтроки, ПараметрыВыводаЗапроса.ИспользованиеЧередования);

		Для Индекс = 0 По КоличествоКолонок - 1 Цикл
			Значение = Строка.Получить(Индекс);
			
			ЗначениеДляПараметра = Значение;
			ОбластьДетали.Параметры.Значение = ЗначениеДляПараметра;
			ОбластьДетали.Параметры.Расшифровка = Значение;
			УстановкаМаксимальнойШириныВМассив(Индекс, ЗначениеДляПараметра, ПараметрыВыводаЗапроса.МассивШириныКолонок);
			Детали.Присоединить(ОбластьДетали);
		КонецЦикла;
		ИндексСтроки = ИндексСтроки + 1;
		ОбщиеДетали.Вывести(Детали, Уровень);
	КонецЦикла;
		
КонецПроцедуры

// Устанавливает максимальную ширину ячейки для каждой колонки.
//
Процедура УстановкаМаксимальнойШириныВМассив(Индекс, знач Элем, МассивШириныКолонок)
	МаксимальнаяШиринаЯчейки    = 100;
	
	Элем = СокрП(Элем);
	Элем = СтрДлина(Элем);
	Если Индекс > МассивШириныКолонок.ВГраница() Тогда
		Если Элем < МаксимальнаяШиринаЯчейки Тогда 
			МассивШириныКолонок.Вставить(Индекс, Элем + 1);
		Иначе
			МассивШириныКолонок.Вставить(Индекс, МаксимальнаяШиринаЯчейки);
		КонецЕсли;	
	Иначе
		Макс = МассивШириныКолонок.Получить(Индекс);
		Если Элем > Макс Тогда
			Если Элем < МаксимальнаяШиринаЯчейки Тогда
				МассивШириныКолонок.Установить(Индекс, Элем + 1);
			Иначе
				МассивШириныКолонок.Установить(Индекс, МаксимальнаяШиринаЯчейки);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры	

Процедура УстановкаАвтоШирины(РезультатЗапроса, МассивМаксШирины)
	ВерхняяГраница = МассивМаксШирины.ВГраница();
	Если ВерхняяГраница = -1 Тогда
		Возврат;
	КонецЕсли;
	
	Для Индекс = 0 По ВерхняяГраница Цикл 
		ВременныйТабличныйДокумент = Новый ТабличныйДокумент;
		Стр = ВременныйТабличныйДокумент.ПолучитьОбласть(1, Индекс + 1, 1, Индекс + 1);
		РезультатЗапроса.Присоединить(Стр).ШиринаКолонки = МассивМаксШирины.Получить(Индекс);
	КонецЦикла;
КонецПроцедуры

Функция ОпределитьЦветФонаПоИндексу(Индекс, Использование)
	ЦветЧередования	= Новый Цвет(245, 242, 221);
	
	Если Не Использование Тогда
		Возврат WebЦвета.Белый;
	КонецЕсли;	
	
	Остаток = Индекс % 2;
	Если Остаток = 0 Тогда
		Цвет = ЦветЧередования;
	Иначе
		Цвет = WebЦвета.Белый;
	КонецЕсли;	
	
	Возврат Цвет;
КонецФункции

#КонецОбласти

#КонецЕсли