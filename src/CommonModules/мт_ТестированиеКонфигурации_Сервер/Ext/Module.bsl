
//Эта функция вызывается при каждом запуске системы от имени пользователя с полными правами, 
//и проверяет сохранность метаданных, нарушение которой приводит к потере данных базы
Процедура ПроверкаКонфигурации(Отказ) Экспорт
	
	Если Не РольДоступна("ПолныеПрава") Тогда
		возврат;
	КонецЕсли;
	
	ПроверитьДвижения(Отказ);
	ПроверитьОпределяемыеТипы(Отказ);
	
КонецПроцедуры

#Область ПроверкаДвижений

//пример
Процедура ПроверитьДвижения(Отказ)
	
	ПроверенныеДвижения = Новый Соответствие;
	
	ПроверитьДвижения_ЭтапПроизводства2_2(Отказ, ПроверенныеДвижения);
	
	мт_ТестированиеКонфигурации_Служебный.ПолучитьНепроверенныеДвиженияПоДокументам(ПроверенныеДвижения, Отказ);
	
КонецПроцедуры

//пример
//@skip-warning
Процедура ПроверитьДвижения_ЭтапПроизводства2_2(Отказ, ПроверенныеДвижения)
	
//	МетаданныеДокумента = Метаданные.Документы.ЭтапПроизводства2_2;
	
//	ТребуемыеДвижения = Новый Массив;
//	ТребуемыеДвижения.Добавить(Метаданные.РегистрыСведений.мт_СвязьСборкиИВыпуска);
//	ТребуемыеДвижения.Добавить(Метаданные.РегистрыСведений.мт_СерийныеНомераПроизводственныхПартий);
	
//	мт_ТестированиеКонфигурации_Служебный.ПроверитьНаличиеДвижений(МетаданныеДокумента, ТребуемыеДвижения, Отказ, ПроверенныеДвижения);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаОпределяемыхТипов

//пример
Процедура ПроверитьОпределяемыеТипы(Отказ)
	
	ПроверенныеТипы = Новый Соответствие;
	
	ПроверитьОпределяемыйТип_ВладелецПрисоединенныхФайлов(Отказ, ПроверенныеТипы);
	
	ЗаголовокСообщенияОбОшибке = "Не выполняется проверка определяемых типов:";
	мт_ТестированиеКонфигурации_Служебный.СообщитьОНепроверенныхТипах(ПроверенныеТипы, Отказ, Метаданные.ОпределяемыеТипы, ЗаголовокСообщенияОбОшибке);
	
КонецПроцедуры

//пример
//@skip-warning
Процедура ПроверитьОпределяемыйТип_ВладелецПрисоединенныхФайлов(Отказ, ПроверенныеТипы)
	
//	МетаданныеОпределяемогоТипа = Метаданные.ОпределяемыеТипы.ВладелецПрисоединенныхФайлов;
//	
//	ТребуемыеТипы = Новый Массив;
//	ТребуемыеТипы.Добавить(Тип("ДокументСсылка.мт_АктОБраке"));
//	
//	мт_ТестированиеКонфигурации_Служебный.ПроверитьВхождениеТипов_в_ТипМетаданного(МетаданныеОпределяемогоТипа, ТребуемыеТипы, Отказ, ПроверенныеТипы)
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКритериевОтбора

//пример
Процедура ПроверитьКритерииОтбора(Отказ) Экспорт
	
	ПроверенныеТипы = Новый Соответствие;
	ПроверенныйСостав = Новый Соответствие;
	
	ПроверитьКритерийОтбора_СвязанныеДокументы(Отказ, ПроверенныеТипы, ПроверенныйСостав);
	
	ЗаголовокСообщенияОбОшибке = "Не выполняется проверка типов критериев отбора:";
	мт_ТестированиеКонфигурации_Служебный.СообщитьОНепроверенныхТипах(ПроверенныеТипы, Отказ, Метаданные.КритерииОтбора, ЗаголовокСообщенияОбОшибке);
	
	ЗаголовокСообщенияОбОшибке = "Не выполняется проверка состава критериев отбора:";
	мт_ТестированиеКонфигурации_Служебный.СообщитьОНепроверенномСоставе(ПроверенныйСостав, Отказ, Метаданные.КритерииОтбора, ЗаголовокСообщенияОбОшибке);
	
КонецПроцедуры

//пример
//@skip-warning
Процедура ПроверитьКритерийОтбора_СвязанныеДокументы(Отказ, ПроверенныеТипы, ПроверенныйСостав)
	
//	ОбъектМетаданных = Метаданные.КритерииОтбора.СвязанныеДокументы;
//	
//	ОписаниеТипов = ОбъектМетаданных.Тип;
//	
//	ТребуемыеТипы = Новый Массив;
//	ТребуемыеТипы.Добавить(Тип("ДокументСсылка.мт_ЗаявкаНаКонтрольОТК"));
//	
//	мт_ТестированиеКонфигурации_Служебный.ПроверитьВхождениеТипов_в_ТипМетаданного(ОбъектМетаданных, ТребуемыеТипы, Отказ, ПроверенныеТипы);
//	
//	ТребуемыйСостав = Новый Массив;
//	ТребуемыйСостав.Добавить(Метаданные.Документы.мт_АктОБраке.Реквизиты.ЗаявкаНаКонтроль);
//	
//	мт_ТестированиеКонфигурации_Служебный.ПроверитьВхождениеВСостав(ОбъектМетаданных, ТребуемыйСостав, Отказ, ПроверенныйСостав);
	
КонецПроцедуры

#КонецОбласти

//эти проверки вызываются отдельно из формы мт_ПроверкаКонфигурации

#Область ПроверкаПрочихМетаданных

//пример
Процедура ПроверитьПрочиеМетаданные(Отказ) Экспорт
	
	ПроверитьСоответствиеИзмеренийРегистра_мт_РаспоряжениеНаОформлениеДокументовОТК(Отказ);
	ПроверитьИзмененныеТипыРеквизитовОбъектов(Отказ);
	ПроверитьСоответствиеПравНаОбъекты_И_ИхПрисоединенныеФайлы(Отказ);
	
КонецПроцедуры

//пример
//@skip-warning
Процедура ПроверитьСоответствиеИзмеренийРегистра_мт_РаспоряжениеНаОформлениеДокументовОТК(Отказ)
	
//	//состав измерений регистра накопления мт_РаспоряжениеНаОформлениеДокументовОТК
//	//и регистра сведений мт_РеквизитыРаспоряженийНаОформлениеДокументовОТК должны соответствовать друг другу
//	//	(последний используется в качестве остатков первого)
//	
//	Объект_1 = Метаданные.РегистрыНакопления.мт_РаспоряжениеНаОформлениеДокументовОТК;
//	Объект_2 = Метаданные.РегистрыСведений.мт_РеквизитыРаспоряженийНаОформлениеДокументовОТК;
//	
//	ТекстСообщенияОбОшибке = СтрШаблон("Не соответствуют друг другу измерения регистров %1 и %2", Объект_1.ПолноеИмя(), Объект_2.ПолноеИмя());
//	
//	Если Объект_1.Измерения.Количество() <> Объект_2.Измерения.Количество() Тогда
//		СообщитьОбОшибке(ТекстСообщенияОбОшибке, Отказ);
//		возврат;
//	КонецЕсли;
//	
//	Для Каждого Измерение Из Объект_1.Измерения Цикл
//		Если Объект_2.Измерения.Найти(Измерение.Имя) = Неопределено Тогда
//			СообщитьОбОшибке(ТекстСообщенияОбОшибке, Отказ);
//			возврат;
//		КонецЕсли;
//	КонецЦикла;
	
КонецПроцедуры

//пример
//@skip-warning
Процедура ПроверитьИзмененныеТипыРеквизитовОбъектов(Отказ)
	
//	ПроверенныеТипы = Новый Соответствие;
//	
//	ОбъектМетаданных = Метаданные.Документы.ПеремещениеТоваров.Реквизиты.ДокументОснование;
//	
//	ТребуемыеТипы = Новый Массив;
//	ТребуемыеТипы.Добавить(Тип("ДокументСсылка.мт_АктОБраке"));
//	
//	мт_ТестированиеКонфигурации_Служебный.ПроверитьВхождениеТипов_в_ТипМетаданного(ОбъектМетаданных, ТребуемыеТипы, Отказ, ПроверенныеТипы)
	
КонецПроцедуры

//пример
//@skip-warning
Процедура ПроверитьСоответствиеПравНаОбъекты_И_ИхПрисоединенныеФайлы(Отказ)
	
//	ПроверяемыеМетаданные = Новый Соответствие;
//	ПроверяемыеМетаданные.Вставить(Метаданные.Документы.мт_АктОБраке, Метаданные.Справочники.мт_АктОБракеПрисоединенныеФайлы);
//	
//	мт_ТестированиеКонфигурации_Служебный.ПроверитьСоответствиеПравНаПросмотр(ПроверяемыеМетаданные, Отказ)
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаОтчетов

Процедура ПроверитьОтчеты(Отказ) Экспорт
	
	мт_ТестированиеКонфигурации_Служебный.СинтаксическаяПроверкаСхемКомпоновкиДанныхДобавленныхОтчетов(Отказ);
	
	ТестированиеИзмененныхОтчетовОсновнойКонфигурации(Отказ);
	
КонецПроцедуры

//пример
//@skip-warning
Процедура ТестированиеИзмененныхОтчетовОсновнойКонфигурации(Отказ)
	
//	Отчеты.ВыпускПродукции.ПровестиТестирование(Отказ);
	
КонецПроцедуры

#КонецОбласти

//пример
//@skip-warning
Процедура ПрочиеТесты(Отказ) Экспорт
	
//	мт_Штрихкодирование.тест_ТипШтрихкода(Отказ);
	
КонецПроцедуры

#Область ПроверкаРолиАудитора

//Аудитор должен иметь возможность просматривать все объекты, но не должен иметь возможности редактирования

//пример
//@skip-warning
Процедура ПроверитьРольАудитора(Отказ) Экспорт
	
	//по состоянию на 12.08.2020 (2.4.12.83) видно не все, но для аудитора, как мне кажется, достаточно.
	//2.5.5.77 - соответствует тому, что видно на 2.4.12
	
//	ПроверяемаяРоль = Метаданные.Роли.мт_ВсеДляПросмотра;
//	
//	ИсключаемыеМетаданные = РольАудитора_ИсключаемыеМетаданные();
//	ДополнительноПроверить = РольАудитора_ДополнительноПроверить();
//	
//	Проверять = Новый Соответствие;
//	Проверять.Вставить(Метаданные.Подсистемы, "Просмотр");
//	Проверять.Вставить(Метаданные.ПараметрыСеанса, "Получение, Установка");
//	Проверять.Вставить(Метаданные.ОбщиеРеквизиты, "Просмотр");
//	Проверять.Вставить(Метаданные.ПланыОбмена, "Просмотр");
//	Проверять.Вставить(Метаданные.КритерииОтбора, "Просмотр");
//	Проверять.Вставить(Метаданные.ОбщиеФормы, "Просмотр");
//	Проверять.Вставить(Метаданные.ОбщиеКоманды, "Просмотр");
//	Проверять.Вставить(Метаданные.Константы, "Просмотр");
//	Проверять.Вставить(Метаданные.Справочники, "Просмотр");
//	Проверять.Вставить(Метаданные.Документы, "Просмотр");
//	Проверять.Вставить(Метаданные.ЖурналыДокументов, "Просмотр");
//	Проверять.Вставить(Метаданные.Отчеты, "Использование, Просмотр");
//	Проверять.Вставить(Метаданные.Обработки, "Использование, Просмотр");
//	Проверять.Вставить(Метаданные.ПланыВидовРасчета, "Просмотр");
//	Проверять.Вставить(Метаданные.ПланыВидовХарактеристик, "Просмотр");
//	Проверять.Вставить(Метаданные.ПланыСчетов, "Просмотр");
//	Проверять.Вставить(Метаданные.РегистрыБухгалтерии, "Просмотр");
//	Проверять.Вставить(Метаданные.РегистрыНакопления, "Просмотр");
//	Проверять.Вставить(Метаданные.РегистрыРасчета, "Просмотр");
//	Проверять.Вставить(Метаданные.РегистрыСведений, "Просмотр");
//	
//	Для Каждого Раздел Из Проверять Цикл
//	
//		Если Не ЗначениеЗаполнено(Раздел.Значение) Тогда
//			СообщитьОбОшибке("Не указано, что проверять: "+Строка(Раздел), Отказ);
//			продолжить;
//		КонецЕсли;
//		
//		ПраваКПроверке = Новый Структура(Раздел.Значение);
//		
//		Для Каждого ОбъектМетаданных Из Раздел.Ключ Цикл
//			
//			ДолжноБытьПравоДоступа = ИсключаемыеМетаданные.Найти(ОбъектМетаданных) = Неопределено;
//			
//			Для Каждого Право Из ПраваКПроверке Цикл
//				
//				ЕстьПравоДоступа = ПравоДоступа(Право.Ключ, ОбъектМетаданных, ПроверяемаяРоль);
//			
//				Если Не ЕстьПравоДоступа = ДолжноБытьПравоДоступа Тогда
//					
//					Если ДолжноБытьПравоДоступа Тогда
//						ТекстОшибки = СтрШаблон("Нет доступа %1 к %2", Право.Ключ, ОбъектМетаданных.ПолноеИмя());
//					Иначе
//						ТекстОшибки = СтрШаблон("Есть доступ %1 к %2", Право.Ключ, ОбъектМетаданных.ПолноеИмя());
//					КонецЕсли;	
//					
//					СообщитьОбОшибке(ТекстОшибки, Отказ);
//					
//				КонецЕсли;
//				
//			КонецЦикла;
//			
//		КонецЦикла;
//		
//	КонецЦикла;
//	
//	//дополнительно
//	Для Каждого ЭлементДополнительнойПроверки Из ДополнительноПроверить Цикл
//		
//		ОбъектМетаданных = ЭлементДополнительнойПроверки.Ключ;
//		
//		Если Не ЗначениеЗаполнено(ЭлементДополнительнойПроверки.Значение) Тогда
//			СообщитьОбОшибке("Не указано, что проверять: "+Строка(ОбъектМетаданных), Отказ);
//			продолжить;
//		КонецЕсли;
//		
//		ПраваКПроверке = Новый Структура(ЭлементДополнительнойПроверки.Значение);
//		
//		ДолжноБытьПравоДоступа = ИсключаемыеМетаданные.Найти(ОбъектМетаданных) = Неопределено;
//			
//		Для Каждого Право Из ПраваКПроверке Цикл
//			
//			ЕстьПравоДоступа = ПравоДоступа(Право.Ключ, ОбъектМетаданных, ПроверяемаяРоль);
//			
//			Если Не ЕстьПравоДоступа = ДолжноБытьПравоДоступа Тогда
//				
//				Если ДолжноБытьПравоДоступа Тогда
//					ТекстОшибки = СтрШаблон("Нет доступа %1 к %2", Право.Ключ, ОбъектМетаданных.ПолноеИмя());
//				Иначе
//					ТекстОшибки = СтрШаблон("Есть доступ %1 к %2", Право.Ключ, ОбъектМетаданных.ПолноеИмя());
//				КонецЕсли;	
//				
//				СообщитьОбОшибке(ТекстОшибки, Отказ);
//				
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//	КонецЦикла;
	
КонецПроцедуры

//пример
//@skip-warning
Функция РольАудитора_ИсключаемыеМетаданные()
	
//	//кроме чертежей и обработки СамообслуживаниеПартнеров, все остальное исключать не обязательно
//	
//	Результат = Новый Массив;
//	
//	//это исключать обязательно:
//	Результат.Добавить(Метаданные.Подсистемы.мт_Чертежи);
//	Результат.Добавить(Метаданные.ОбщиеКоманды.мт_Чертежи);
//	
//	Результат.Добавить(Метаданные.Обработки.СамообслуживаниеПартнеров);	//если есть право на эту обработку, то вылетает ошибка при запуске 1С
//																		//у администратора этого права нет.
//	
//	возврат Результат;
	
КонецФункции

//пример
//@skip-warning
Функция РольАудитора_ДополнительноПроверить()
	
//	Результат = Новый Соответствие;
//	
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Справочники.БанковскиеСчетаКонтрагентов.Команды.БанковскиеСчетаПартнеров);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Справочники.БанковскиеСчетаОрганизаций.Команды.БанковскиеСчета);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Справочники.БанковскиеСчетаОрганизаций.Команды.БанковскиеСчетаОрганизации);
//	
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Справочники.ДоговорыКонтрагентов.Команды.ДоговорыСКлиентами);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Справочники.ДоговорыКонтрагентов.Команды.ДоговорыСПоставщиками);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Справочники.ДоговорыКонтрагентов.Команды.ДоговорыСПартнером);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Справочники.ДоговорыКонтрагентов.Команды.ДоговорыСКонтрагентом);
//	
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Справочники.Кассы.Команды.КассыПредприятия);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Справочники.Кассы.Команды.КассыОрганизации);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Справочники.Кассы.Команды.КассыКассовойКниги);
//	
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Справочники.Номенклатура.Команды.Номенклатура);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Справочники.Организации.Команды.Организации);
//	
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Справочники.Партнеры.Команды.Клиенты);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Справочники.Партнеры.Команды.Конкуренты);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Справочники.Партнеры.Команды.Поставщики);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Справочники.Партнеры.Команды.Партнеры);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Справочники.Партнеры.Команды.Контрагенты);
//	
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Справочники.Склады.Команды.Склады);
//	
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Справочники.СоглашенияСКлиентами.Команды.ОткрытиеСпискаТиповыхСоглашений);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Справочники.СоглашенияСКлиентами.Команды.ОткрытиеСпискаИндивидуальныхСоглашений);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Справочники.СоглашенияСКлиентами.Команды.СоглашенияСКлиентом);
//	
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Документы.ЗаказКлиента.Команды.ЗаказыКлиентов);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Документы.ЗаказПоставщику.Команды.ЗаказыПоставщикам);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента.Команды.ЗаявкиНаВозвратТоваровОтКлиентов);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.Команды.ЗаявкиНаОплатуПоставщикам);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.Команды.ЗаявкиНаРасходованиеДенежныхСредств);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Документы.КоммерческоеПредложениеКлиенту.Команды.КоммерческиеПредложенияКлиентам);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Документы.КоммерческоеПредложениеПоставщика.Команды.КоммерческиеПредложенияПоставщиков);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Документы.ПриходныйКассовыйОрдер.Команды.ПриходныеКассовыеОрдера);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Документы.РасходныйКассовыйОрдер.Команды.РасходныеКассовыеОрдера);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Документы.СчетФактураКомиссионеру.Команды.СчетаФактурыКомиссионерам);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Документы.СчетФактураКомитента.Команды.СчетаФактурыКомитентов);
//	
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Обработки.ПанельСправочниковБюджетирования.Команды.РазделСправочниковБюджетирование);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Обработки.ПанельСправочниковВнеоборотныеАктивы.Команды.РазделСправочниковВнеоборотныеАктивы);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Обработки.ПанельСправочниковЗарплата.Команды.РазделСправочниковЗарплата);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Обработки.ПанельСправочниковКадры.Команды.РазделСправочниковКадры);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Обработки.ПанельСправочниковМаркетинг.Команды.РазделСправочниковМаркетинг);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Обработки.ПанельСправочниковМеждународныйФинансовыйУчет.Команды.РазделСправочниковМФУ);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Обработки.ПанельСправочниковНСИ.Команды.ПанельКлассификаторыНоменклатуры);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Обработки.ПанельСправочниковПроизводство.Команды.РазделСправочниковПроизводство);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Обработки.ПанельСправочниковРегламентированныйУчет.Команды.РазделСправочниковРегламентированныйУчет);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Обработки.ПанельСправочниковСклад.Команды.РазделСправочниковСклад);
//	
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Обработки.ПрайсЛист.Команды.ПрайсЛист);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Обработки.ПрайсЛистПоставщика.Команды.ПрайсЛистыПоставщиков);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.Обработки.ПрайсЛистПоставщика.Команды.ПрайсЛистыКонкурентов);
//	//ДобавитьПроверкуПросмотра(Результат, Метаданные.Обработки.СостояниеОбеспечения.Команды.СостояниеОбеспеченияЗаказов);
//	
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.ЖурналыДокументов.ОтчетыКомиссионеров.Команды.ОтчетыКомиссионеров);
//	ДобавитьПроверкуПросмотра(Результат, Метаданные.ЖурналыДокументов.ОтчетыКомитентам.Команды.ОтчетыКомитентам);
//
//	возврат Результат;
	
КонецФункции

//@skip-warning
Процедура ДобавитьПроверкуПросмотра(Результат, ОбъектМетаданных)
	Результат.Вставить(ОбъектМетаданных, "Просмотр");
КонецПроцедуры

#КонецОбласти

//@skip-warning
Процедура СообщитьОбОшибке(ТекстСообщенияОбОшибке, Отказ)
	
	мСтрокиОшибок = Новый Массив;
	мСтрокиОшибок.Добавить(ТекстСообщенияОбОшибке);
	мт_ТестированиеКонфигурации_Служебный.СообщитьОбОшибке(мСтрокиОшибок, Отказ);
	
КонецПроцедуры
